// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  phone       String?  @unique
  username    String?  @unique
  password    String?
  isAnonymous Boolean  @default(false)
  role        UserRole @default(CITIZEN)
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Emergency contacts
  emergencyContacts EmergencyContact[]
  
  // Reports submitted by user
  incidentReports   IncidentReport[]
  missingPersons    MissingPerson[]
  communityAlerts   CommunityAlert[]
  
  // Verification submissions
  verifications     Verification[]
  
  @@map("users")
}

model EmergencyContact {
  id       String @id @default(cuid())
  name     String
  phone    String
  email    String?
  relation String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("emergency_contacts")
}

// Core Incident Reporting
model IncidentReport {
  id              String            @id @default(cuid())
  title           String
  description     String
  category        IncidentCategory
  subCategory     String?
  location        Json // {lat, lng, address}
  incidentDate    DateTime
  isAnonymous     Boolean           @default(false)
  status          ReportStatus      @default(SUBMITTED)
  severity        SeverityLevel     @default(MEDIUM)
  
  // User who submitted (null if anonymous)
  submittedBy     User?             @relation(fields: [submittedById], references: [id])
  submittedById   String?
  
  // Evidence
  evidence        Evidence[]
  
  // Witnesses
  witnesses       Witness[]
  
  // Case tracking
  caseUpdates     CaseUpdate[]
  
  // Metadata
  metadata        Json? // Additional metadata like device info, etc.
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("incident_reports")
}

model Evidence {
  id              String          @id @default(cuid())
  type            EvidenceType
  filename        String
  filepath        String
  filesize        Int
  mimeType        String
  
  // Metadata extracted from file
  metadata        Json? // GPS, timestamp, device info, etc.
  verified        Boolean         @default(false)
  
  // Related to incident
  incidentReport  IncidentReport  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId      String
  
  createdAt       DateTime        @default(now())
  
  @@map("evidence")
}

model Witness {
  id              String          @id @default(cuid())
  name            String?
  contact         String?
  isAnonymous     Boolean         @default(true)
  testimony       String
  
  incidentReport  IncidentReport  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId      String
  
  createdAt       DateTime        @default(now())
  
  @@map("witnesses")
}

model CaseUpdate {
  id              String          @id @default(cuid())
  status          ReportStatus
  description     String
  updatedBy       String? // Official or organization name
  
  incidentReport  IncidentReport  @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId      String
  
  createdAt       DateTime        @default(now())
  
  @@map("case_updates")
}

// Missing Persons Module
model MissingPerson {
  id              String          @id @default(cuid())
  fullName        String
  age             Int?
  gender          Gender?
  physicalDesc    String?
  lastSeenDate    DateTime
  lastSeenLocation Json // {lat, lng, address}
  clothing        String?
  distinguishingMarks String?
  photo           String?
  
  // Reporter info
  reporterName    String
  reporterContact String
  relationship    String
  
  // Case details
  circumstances   String?
  suspectedPerps  String?
  isPublic        Boolean         @default(false) // Whether to show in public database
  status          MissingStatus   @default(MISSING)
  
  // User who submitted
  submittedBy     User?           @relation(fields: [submittedById], references: [id])
  submittedById   String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("missing_persons")
}

// Safe Spaces Network
model SafeSpace {
  id              String          @id @default(cuid())
  name            String
  type            SafeSpaceType
  location        Json // {lat, lng, address}
  contact         String
  email           String?
  description     String?
  services        String[]
  capacity        Int?
  operatingHours  String?
  verified        Boolean         @default(false)
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("safe_spaces")
}

// Community Alerts and Protection
model CommunityAlert {
  id              String          @id @default(cuid())
  title           String
  message         String
  alertType       AlertType
  severity        SeverityLevel   @default(MEDIUM)
  location        Json? // {lat, lng, radius}
  isActive        Boolean         @default(true)
  
  // User who submitted
  submittedBy     User?           @relation(fields: [submittedById], references: [id])
  submittedById   String?
  
  createdAt       DateTime        @default(now())
  expiresAt       DateTime?
  
  @@map("community_alerts")
}

// Legal Resources
model LegalAidProvider {
  id              String          @id @default(cuid())
  name            String
  type            ProviderType
  contact         String
  email           String?
  website         String?
  location        Json // {lat, lng, address}
  specializations String[]
  isProBono       Boolean         @default(false)
  isVerified      Boolean         @default(false)
  description     String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("legal_aid_providers")
}

// Public Officials Database
model PublicOfficial {
  id              String          @id @default(cuid())
  name            String
  position        String
  department      String
  contact         String?
  email           String?
  jurisdiction    String
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("public_officials")
}

// Content Management
model LegalGuide {
  id              String          @id @default(cuid())
  title           String
  content         String
  category        String
  tags            String[]
  isPublished     Boolean         @default(false)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("legal_guides")
}

// Verification system for user-submitted data
model Verification {
  id              String          @id @default(cuid())
  entityType      String // "incident", "missing_person", "safe_space", etc.
  entityId        String
  verifiedBy      User            @relation(fields: [verifiedById], references: [id])
  verifiedById    String
  status          VerificationStatus @default(PENDING)
  notes           String?
  
  createdAt       DateTime        @default(now())
  
  @@map("verifications")
}

// Enums
enum UserRole {
  CITIZEN
  VOLUNTEER
  LEGAL_AID
  HUMAN_RIGHTS_ORG
  ADMIN
  SUPER_ADMIN
}

enum IncidentCategory {
  POLICE_BRUTALITY
  EXTRAJUDICIAL_KILLING
  ENFORCED_DISAPPEARANCE
  ABDUCTION
  SEXUAL_ASSAULT
  LOOTING
  PROPERTY_DAMAGE
  ARBITRARY_ARREST
  HARASSMENT
  TORTURE
  UNLAWFUL_DETENTION
  FREEDOM_OF_ASSEMBLY
  FREEDOM_OF_EXPRESSION
  OTHER
}

enum ReportStatus {
  SUBMITTED
  UNDER_REVIEW
  INVESTIGATING
  REFERRED_TO_AUTHORITIES
  LEGAL_ACTION_TAKEN
  CASE_CLOSED
  DISMISSED
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum EvidenceType {
  PHOTO
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MissingStatus {
  MISSING
  FOUND_SAFE
  FOUND_DECEASED
  CASE_CLOSED
}

enum SafeSpaceType {
  COMMUNITY_CENTER
  RELIGIOUS_INSTITUTION
  CLINIC
  PRIVATE_HOME
  SAFE_HOUSE
  LEGAL_AID_OFFICE
  NGO_OFFICE
  OTHER
}

enum AlertType {
  SECURITY_THREAT
  POLICE_PRESENCE
  PROTEST_UPDATE
  SAFETY_ADVISORY
  EMERGENCY
  GENERAL_INFO
}

enum ProviderType {
  LAWYER
  LEGAL_AID_ORGANIZATION
  HUMAN_RIGHTS_ORG
  PARALEGAL
  LAW_CLINIC
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
} 